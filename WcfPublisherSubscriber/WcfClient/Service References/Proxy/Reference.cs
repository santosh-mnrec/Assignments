//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClient.Proxy {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotifyMode", Namespace="http://schemas.datacontract.org/2004/07/WcfNotification")]
    public enum NotifyMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wicket = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Over = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FiveOverOnce = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Runs = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FiftyRunsOnce = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.ICricketService", CallbackContract=typeof(WcfClient.Proxy.ICricketServiceCallback))]
    public interface ICricketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICricketService/GetNotification", ReplyAction="http://tempuri.org/ICricketService/GetNotificationResponse")]
        bool GetNotification(WcfClient.Proxy.NotifyMode mode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICricketService/GetNotification", ReplyAction="http://tempuri.org/ICricketService/GetNotificationResponse")]
        System.Threading.Tasks.Task<bool> GetNotificationAsync(WcfClient.Proxy.NotifyMode mode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICricketService/GetNotify")]
        void GetNotify(WcfClient.Proxy.NotifyMode mode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICricketService/GetNotify")]
        System.Threading.Tasks.Task GetNotifyAsync(WcfClient.Proxy.NotifyMode mode, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICricketServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICricketService/AsyncNotifyMessage")]
        void AsyncNotifyMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICricketServiceChannel : WcfClient.Proxy.ICricketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CricketServiceClient : System.ServiceModel.DuplexClientBase<WcfClient.Proxy.ICricketService>, WcfClient.Proxy.ICricketService {
        
        public CricketServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CricketServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CricketServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CricketServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CricketServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool GetNotification(WcfClient.Proxy.NotifyMode mode, string username) {
            return base.Channel.GetNotification(mode, username);
        }
        
        public System.Threading.Tasks.Task<bool> GetNotificationAsync(WcfClient.Proxy.NotifyMode mode, string username) {
            return base.Channel.GetNotificationAsync(mode, username);
        }
        
        public void GetNotify(WcfClient.Proxy.NotifyMode mode, string username) {
            base.Channel.GetNotify(mode, username);
        }
        
        public System.Threading.Tasks.Task GetNotifyAsync(WcfClient.Proxy.NotifyMode mode, string username) {
            return base.Channel.GetNotifyAsync(mode, username);
        }
    }
}
